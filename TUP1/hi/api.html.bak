<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DeepSeek API 调用界面</title>
    <style>
        :root {
            --primary-color: #2563eb;
            --secondary-color: #1e40af;
            --accent-color: #3b82f6;
            --light-color: #f3f4f6;
            --dark-color: #1f2937;
            --success-color: #10b981;
            --error-color: #ef4444;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f8fafc;
            color: var(--dark-color);
            line-height: 1.6;
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 20px;
        }
        
        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
            }
        }
        
        header {
            grid-column: 1 / -1;
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
        }
        
        .description {
            font-size: 1.1rem;
            opacity: 0.9;
        }
        
        .config-panel {
            background-color: white;
            padding: 25px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
        }
        
        .chat-panel {
            background-color: white;
            padding: 25px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            display: flex;
            flex-direction: column;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--dark-color);
        }
        
        input, select, textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }
        
        input[type="range"] {
            height: 5px;
        }
        
        .range-values {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
            font-size: 14px;
            color: #64748b;
        }
        
        .btn {
            padding: 12px 20px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: background-color 0.3s;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .btn:hover {
            background-color: var(--secondary-color);
        }
        
        .btn:disabled {
            background-color: #cbd5e1;
            cursor: not-allowed;
        }
        
        .btn-secondary {
            background-color: #64748b;
        }
        
        .btn-secondary:hover {
            background-color: #475569;
        }
        
        .btn-danger {
            background-color: var(--error-color);
        }
        
        .btn-danger:hover {
            background-color: #dc2626;
        }
        
        .chat-box {
            flex-grow: 1;
            height: 400px;
            overflow-y: auto;
            border: 1px solid #ddd;
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 20px;
            background-color: #f9fafb;
        }
        
        .message {
            margin-bottom: 15px;
            padding: 12px;
            border-radius: var(--border-radius);
            max-width: 80%;
        }
        
        .user-message {
            background-color: var(--primary-color);
            color: white;
            margin-left: auto;
        }
        
        .assistant-message {
            background-color: #e5e7eb;
            color: var(--dark-color);
        }
        
        .message-content {
            white-space: pre-wrap;
        }
        
        .message-info {
            font-size: 12px;
            opacity: 0.7;
            margin-bottom: 5px;
        }
        
        .input-area {
            display: flex;
            gap: 10px;
        }
        
        .input-area textarea {
            flex-grow: 1;
            resize: vertical;
            min-height: 80px;
        }
        
        .token-info {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
            font-size: 14px;
            color: #64748b;
        }
        
        .alert {
            padding: 12px;
            border-radius: var(--border-radius);
            margin-bottom: 20px;
            display: none;
        }
        
        .alert-error {
            background-color: #fee2e2;
            color: var(--error-color);
            border: 1px solid #fecaca;
        }
        
        .alert-success {
            background-color: #d1fae5;
            color: var(--success-color);
            border: 1px solid #a7f3d0;
        }
        
        .param-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }
        
        @media (max-width: 992px) {
            .param-grid {
                grid-template-columns: 1fr;
            }
        }
        
        .section-title {
            font-size: 1.2rem;
            margin: 25px 0 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid #e5e7eb;
            color: var(--primary-color);
        }
        
        .section-title:first-child {
            margin-top: 0;
        }
        
        .flex-between {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .icon {
            margin-right: 8px;
        }
    </style>
</head>
<body>
    <header>
        <h1>DeepSeek API 调用界面</h1>
        <p class="description">专业的界面，用于调用DeepSeek官方API并进行参数调整</p>
    </header>
    
    <div class="container">
        <div class="config-panel">
            <div class="alert alert-error" id="errorAlert"></div>
            <div class="alert alert-success" id="successAlert"></div>
            
            <div class="section-title">API 配置</div>
            <div class="form-group">
                <label for="apiKey">API 密钥 <span style="color: var(--error-color)">*</span></label>
                <input type="password" id="apiKey" placeholder="输入您的DeepSeek API密钥">
            </div>
            
            <div class="form-group">
                <label for="model">模型选择</label>
                <select id="model">
                    <option value="deepseek-chat">deepseek-chat (非思考模式)</option>
                    <option value="deepseek-reasoner">deepseek-reasoner (思考模式)</option>
                </select>
            </div>
            
            <div class="section-title">参数调整</div>
            <div class="param-grid">
                <div class="form-group">
                    <label for="temperature">Temperature (温度: <span id="temperatureValue">0.7</span>)</label>
                    <input type="range" id="temperature" min="0" max="2" step="0.1" value="0.7">
                    <div class="range-values">
                        <span>0 (确定性)</span>
                        <span>2 (创造性)</span>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="maxTokens">最大令牌数: <span id="maxTokensValue">1024</span></label>
                    <input type="range" id="maxTokens" min="1" max="4096" step="1" value="1024">
                    <div class="range-values">
                        <span>1</span>
                        <span>4096</span>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="topP">Top P (核采样: <span id="topPValue">0.9</span>)</label>
                    <input type="range" id="topP" min="0" max="1" step="0.05" value="0.9">
                    <div class="range-values">
                        <span>0</span>
                        <span>1</span>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="frequencyPenalty">频率惩罚: <span id="frequencyPenaltyValue">0.0</span></label>
                    <input type="range" id="frequencyPenalty" min="-2" max="2" step="0.1" value="0.0">
                    <div class="range-values">
                        <span>-2</span>
                        <span>2</span>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="presencePenalty">存在惩罚: <span id="presencePenaltyValue">0.0</span></label>
                    <input type="range" id="presencePenalty" min="-2" max="2" step="0.1" value="0.0">
                    <div class="range-values">
                        <span>-2</span>
                        <span>2</span>
                    </div>
                </div>
                
                <div class="form-group">
                    <label for="stream">流式输出</label>
                    <select id="stream">
                        <option value="false">否</option>
                        <option value="true">是</option>
                    </select>
                </div>
            </div>
            
            <div class="form-group">
                <label for="systemPrompt">系统提示</label>
                <textarea id="systemPrompt" placeholder="系统角色设定（可选）">You are a helpful assistant.</textarea>
            </div>
            
            <button class="btn" id="saveConfig">
                <span class="icon">💾</span> 保存配置
            </button>
            <button class="btn btn-secondary" id="resetConfig">
                <span class="icon">🔄</span> 重置默认值
            </button>
        </div>
        
        <div class="chat-panel">
            <div class="flex-between">
                <div class="section-title">对话界面</div>
                <button class="btn btn-danger" id="clearChat">
                    <span class="icon">🗑️</span> 清除对话
                </button>
            </div>
            
            <div class="chat-box" id="chatBox"></div>
            
            <div class="input-area">
                <textarea id="userInput" placeholder="输入您的消息..."></textarea>
                <button class="btn" id="sendMessage">
                    <span class="icon">📤</span> 发送
                </button>
            </div>
            
            <div class="token-info">
                <span>提示令牌: <span id="promptTokens">0</span></span>
                <span>完成令牌: <span id="completionTokens">0</span></span>
                <span>总令牌: <span id="totalTokens">0</span></span>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // 获取DOM元素
            const apiKeyInput = document.getElementById('apiKey');
            const modelSelect = document.getElementById('model');
            const temperatureInput = document.getElementById('temperature');
            const temperatureValue = document.getElementById('temperatureValue');
            const maxTokensInput = document.getElementById('maxTokens');
            const maxTokensValue = document.getElementById('maxTokensValue');
            const topPInput = document.getElementById('topP');
            const topPValue = document.getElementById('topPValue');
            const frequencyPenaltyInput = document.getElementById('frequencyPenalty');
            const frequencyPenaltyValue = document.getElementById('frequencyPenaltyValue');
            const presencePenaltyInput = document.getElementById('presencePenalty');
            const presencePenaltyValue = document.getElementById('presencePenaltyValue');
            const streamSelect = document.getElementById('stream');
            const systemPromptInput = document.getElementById('systemPrompt');
            const saveConfigButton = document.getElementById('saveConfig');
            const resetConfigButton = document.getElementById('resetConfig');
            const clearChatButton = document.getElementById('clearChat');
            const chatBox = document.getElementById('chatBox');
            const userInput = document.getElementById('userInput');
            const sendMessageButton = document.getElementById('sendMessage');
            const errorAlert = document.getElementById('errorAlert');
            const successAlert = document.getElementById('successAlert');
            const promptTokensSpan = document.getElementById('promptTokens');
            const completionTokensSpan = document.getElementById('completionTokens');
            const totalTokensSpan = document.getElementById('totalTokens');
            
            // 初始化滑块显示值
            updateSliderValues();
            
            // 从本地存储加载配置
            loadConfig();
            
            // 事件监听器
            temperatureInput.addEventListener('input', () => {
                temperatureValue.textContent = temperatureInput.value;
            });
            
            maxTokensInput.addEventListener('input', () => {
                maxTokensValue.textContent = maxTokensInput.value;
            });
            
            topPInput.addEventListener('input', () => {
                topPValue.textContent = topPInput.value;
            });
            
            frequencyPenaltyInput.addEventListener('input', () => {
                frequencyPenaltyValue.textContent = frequencyPenaltyInput.value;
            });
            
            presencePenaltyInput.addEventListener('input', () => {
                presencePenaltyValue.textContent = presencePenaltyInput.value;
            });
            
            saveConfigButton.addEventListener('click', saveConfig);
            resetConfigButton.addEventListener('click', resetConfig);
            clearChatButton.addEventListener('click', clearChat);
            sendMessageButton.addEventListener('click', sendMessage);
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    sendMessage();
                }
            });
            
            // 更新滑块值显示
            function updateSliderValues() {
                temperatureValue.textContent = temperatureInput.value;
                maxTokensValue.textContent = maxTokensInput.value;
                topPValue.textContent = topPInput.value;
                frequencyPenaltyValue.textContent = frequencyPenaltyInput.value;
                presencePenaltyValue.textContent = presencePenaltyInput.value;
            }
            
            // 保存配置到本地存储
            function saveConfig() {
                const config = {
                    apiKey: apiKeyInput.value,
                    model: modelSelect.value,
                    temperature: parseFloat(temperatureInput.value),
                    maxTokens: parseInt(maxTokensInput.value),
                    topP: parseFloat(topPInput.value),
                    frequencyPenalty: parseFloat(frequencyPenaltyInput.value),
                    presencePenalty: parseFloat(presencePenaltyInput.value),
                    stream: streamSelect.value === 'true',
                    systemPrompt: systemPromptInput.value
                };
                
                localStorage.setItem('deepseekConfig', JSON.stringify(config));
                showAlert('配置已保存！', 'success');
            }
            
            // 从本地存储加载配置
            function loadConfig() {
                const savedConfig = localStorage.getItem('deepseekConfig');
                if (savedConfig) {
                    const config = JSON.parse(savedConfig);
                    
                    apiKeyInput.value = config.apiKey || '';
                    modelSelect.value = config.model || 'deepseek-chat';
                    temperatureInput.value = config.temperature || 0.7;
                    maxTokensInput.value = config.maxTokens || 1024;
                    topPInput.value = config.topP || 0.9;
                    frequencyPenaltyInput.value = config.frequencyPenalty || 0.0;
                    presencePenaltyInput.value = config.presencePenalty || 0.0;
                    streamSelect.value = config.stream ? 'true' : 'false';
                    systemPromptInput.value = config.systemPrompt || 'You are a helpful assistant.';
                    
                    updateSliderValues();
                    showAlert('配置已加载！', 'success');
                }
            }
            
            // 重置为默认配置
            function resetConfig() {
                if (confirm('确定要重置所有设置为默认值吗？')) {
                    localStorage.removeItem('deepseekConfig');
                    localStorage.removeItem('deepseekChatHistory');
                    
                    apiKeyInput.value = '';
                    modelSelect.value = 'deepseek-chat';
                    temperatureInput.value = 0.7;
                    maxTokensInput.value = 1024;
                    topPInput.value = 0.9;
                    frequencyPenaltyInput.value = 0.0;
                    presencePenaltyInput.value = 0.0;
                    streamSelect.value = 'false';
                    systemPromptInput.value = 'You are a helpful assistant.';
                    
                    updateSliderValues();
                    clearChat();
                    showAlert('配置已重置！', 'success');
                }
            }
            
            // 清除聊天记录
            function clearChat() {
                if (confirm('确定要清除所有聊天记录吗？')) {
                    chatBox.innerHTML = '';
                    localStorage.removeItem('deepseekChatHistory');
                    resetTokenCount();
                }
            }
            
            // 显示提示信息
            function showAlert(message, type) {
                const alert = type === 'error' ? errorAlert : successAlert;
                alert.textContent = message;
                alert.style.display = 'block';
                
                setTimeout(() => {
                    alert.style.display = 'none';
                }, 3000);
            }
            
            // 发送消息到DeepSeek API
            async function sendMessage() {
                const apiKey = apiKeyInput.value.trim();
                const message = userInput.value.trim();
                
                if (!apiKey) {
                    showAlert('请输入API密钥！', 'error');
                    return;
                }
                
                if (!message) {
                    showAlert('请输入消息内容！', 'error');
                    return;
                }
                
                // 添加用户消息到聊天框
                addMessageToChat('user', message);
                userInput.value = '';
                
                // 禁用发送按钮
                sendMessageButton.disabled = true;
                sendMessageButton.textContent = '发送中...';
                
                try {
                    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${apiKey}`
                        },
                        body: JSON.stringify({
                            model: modelSelect.value,
                            messages: [
                                { role: 'system', content: systemPromptInput.value },
                                ...getChatHistory(),
                                { role: 'user', content: message }
                            ],
                            temperature: parseFloat(temperatureInput.value),
                            max_tokens: parseInt(maxTokensInput.value),
                            top_p: parseFloat(topPInput.value),
                            frequency_penalty: parseFloat(frequencyPenaltyInput.value),
                            presence_penalty: parseFloat(presencePenaltyInput.value),
                            stream: streamSelect.value === 'true'
                        })
                    });
                    
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error?.message || `HTTP错误: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    const assistantMessage = data.choices[0].message.content;
                    
                    // 添加助手消息到聊天框
                    addMessageToChat('assistant', assistantMessage);
                    
                    // 更新令牌计数
                    updateTokenCount(data.usage);
                    
                    // 保存聊天记录
                    saveChatHistory();
                    
                } catch (error) {
                    console.error('API调用错误:', error);
                    showAlert(`错误: ${error.message}`, 'error');
                    addMessageToChat('error', `无法获取响应: ${error.message}`);
                } finally {
                    // 重新启用发送按钮
                    sendMessageButton.disabled = false;
                    sendMessageButton.innerHTML = '<span class="icon">📤</span> 发送';
                }
            }
            
            // 添加消息到聊天框
            function addMessageToChat(role, content) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${role}-message`;
                
                const messageInfo = document.createElement('div');
                messageInfo.className = 'message-info';
                messageInfo.textContent = `${role === 'user' ? '用户' : '助手'} - ${new Date().toLocaleTimeString()}`;
                
                const messageContent = document.createElement('div');
                messageContent.className = 'message-content';
                messageContent.textContent = content;
                
                messageDiv.appendChild(messageInfo);
                messageDiv.appendChild(messageContent);
                chatBox.appendChild(messageDiv);
                
                // 滚动到底部
                chatBox.scrollTop = chatBox.scrollHeight;
            }
            
            // 获取聊天历史
            function getChatHistory() {
                const messages = [];
                const messageElements = chatBox.querySelectorAll('.message');
                
                messageElements.forEach(element => {
                    if (element.classList.contains('user-message')) {
                        const content = element.querySelector('.message-content').textContent;
                        messages.push({ role: 'user', content });
                    } else if (element.classList.contains('assistant-message')) {
                        const content = element.querySelector('.message-content').textContent;
                        messages.push({ role: 'assistant', content });
                    }
                });
                
                return messages;
            }
            
            // 保存聊天记录到本地存储
            function saveChatHistory() {
                const messages = getChatHistory();
                localStorage.setItem('deepseekChatHistory', JSON.stringify(messages));
            }
            
            // 加载聊天记录
            function loadChatHistory() {
                const savedHistory = localStorage.getItem('deepseekChatHistory');
                if (savedHistory) {
                    const messages = JSON.parse(savedHistory);
                    
                    messages.forEach(message => {
                        addMessageToChat(message.role, message.content);
                    });
                }
            }
            
            // 更新令牌计数
            function updateTokenCount(usage) {
                promptTokensSpan.textContent = usage.prompt_tokens;
                completionTokensSpan.textContent = usage.completion_tokens;
                totalTokensSpan.textContent = usage.total_tokens;
            }
            
            // 重置令牌计数
            function resetTokenCount() {
                promptTokensSpan.textContent = '0';
                completionTokensSpan.textContent = '0';
                totalTokensSpan.textContent = '0';
            }
            
            // 初始加载聊天记录
            loadChatHistory();
        });
    </script>
</body>
</html>
