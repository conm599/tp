<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MMD模型查看器</title>
    <script src="https://cdn.jsdelivr.net/npm/three@0.137.5/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.137.5/examples/js/loaders/MMDLoader.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.137.5/examples/js/controls/OrbitControls.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Arial', sans-serif;
        }
        
        body {
            background-color: #1a1a1a;
            color: #e0e0e0;
            overflow: hidden;
        }
        
        /* 顶部状态栏 */
        .status-bar {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 25px;
            background-color: #000;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 10px;
            font-size: 12px;
            z-index: 1000;
        }
        
        .status-left {
            display: flex;
            align-items: center;
        }
        
        .status-right {
            display: flex;
            align-items: center;
        }
        
        /* 标题栏 */
        .header {
            position: fixed;
            top: 25px;
            left: 0;
            width: 100%;
            height: 50px;
            background-color: #252525;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 15px;
            z-index: 1000;
            border-bottom: 1px solid #333;
        }
        
        .menu-icon {
            width: 20px;
            height: 20px;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            cursor: pointer;
        }
        
        .menu-icon span {
            display: block;
            height: 2px;
            width: 100%;
            background-color: #e0e0e0;
            border-radius: 1px;
        }
        
        .logo {
            display: flex;
            align-items: center;
            color: white;
        }
        
        .logo-icon {
            width: 24px;
            height: 24px;
            margin-right: 8px;
            background: linear-gradient(135deg, #ff0000 0%, #00ff00 50%, #0000ff 100%);
            border-radius: 4px;
        }
        
        .header-controls {
            display: flex;
            align-items: center;
        }
        
        .fps-counter {
            margin-right: 15px;
            font-size: 14px;
            color: #00ff00;
        }
        
        .header-icon {
            width: 24px;
            height: 24px;
            margin-left: 12px;
            cursor: pointer;
            opacity: 0.8;
            transition: opacity 0.2s;
        }
        
        .header-icon:hover {
            opacity: 1;
        }
        
        /* 主内容区 */
        .main-container {
            position: fixed;
            top: 75px;
            left: 0;
            width: 100%;
            height: calc(100% - 75px);
            display: flex;
        }
        
        /* 3D视图 */
        #viewer-container {
            flex: 1;
            background-color: #2a2a2a;
            position: relative;
        }
        
        /* 上传面板 */
        .upload-panel {
            width: 300px;
            background-color: #252525;
            padding: 20px;
            border-right: 1px solid #333;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }
        
        .panel-title {
            font-size: 16px;
            margin-bottom: 20px;
            color: #e0e0e0;
            display: flex;
            align-items: center;
        }
        
        .panel-title span {
            margin-left: 8px;
        }
        
        .upload-area {
            border: 2px dashed #444;
            border-radius: 8px;
            padding: 30px 20px;
            text-align: center;
            margin-bottom: 20px;
            transition: border-color 0.3s;
            cursor: pointer;
        }
        
        .upload-area:hover {
            border-color: #00aaff;
        }
        
        .upload-area p {
            font-size: 14px;
            color: #888;
            margin-top: 10px;
        }
        
        .upload-icon {
            font-size: 36px;
            color: #444;
        }
        
        .btn {
            background-color: #0078d4;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            transition: background-color 0.2s;
            text-align: center;
            margin-top: 10px;
        }
        
        .btn:hover {
            background-color: #0066b8;
        }
        
        .btn-disabled {
            background-color: #444;
            cursor: not-allowed;
        }
        
        .btn-disabled:hover {
            background-color: #444;
        }
        
        /* 模型控制 */
        .model-controls {
            margin-top: 20px;
        }
        
        .control-group {
            margin-bottom: 15px;
        }
        
        .control-group h3 {
            font-size: 14px;
            margin-bottom: 8px;
            color: #ccc;
        }
        
        .slider-container {
            display: flex;
            align-items: center;
        }
        
        .slider-container input {
            flex: 1;
            height: 5px;
        }
        
        .slider-value {
            width: 40px;
            text-align: right;
            margin-left: 10px;
            font-size: 12px;
        }
        
        /* 底部工具栏 */
        .toolbar {
            position: fixed;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 40px;
            background-color: #252525;
            display: flex;
            align-items: center;
            padding: 0 15px;
            border-top: 1px solid #333;
            z-index: 1000;
        }
        
        .axis-label {
            display: flex;
            align-items: center;
            margin-right: 20px;
        }
        
        .axis-x, .axis-y, .axis-z {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 5px;
        }
        
        .axis-x {
            background-color: #ff0000;
        }
        
        .axis-y {
            background-color: #00ff00;
        }
        
        .axis-z {
            background-color: #0000ff;
        }
        
        /* 响应式设计 */
        @media (max-width: 768px) {
            .upload-panel {
                position: fixed;
                left: 0;
                top: 75px;
                height: calc(100% - 115px);
                z-index: 900;
                transition: left 0.3s;
            }
            
            .upload-panel.active {
                left: 0;
            }
            
            .toggle-panel {
                display: block;
            }
        }
        
        /* 添加加载提示 */
        .loading-indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 15px 30px;
            border-radius: 8px;
            display: none;
            z-index: 100;
        }
        
        .error-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #ff5555;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 15px 30px;
            border-radius: 8px;
            display: none;
            z-index: 100;
            text-align: center;
            max-width: 80%;
        }
        
        /* 添加进度条 */
        .progress-container {
            width: 100%;
            height: 5px;
            background-color: #444;
            border-radius: 2px;
            margin-top: 10px;
            overflow: hidden;
            display: none;
        }
        
        .progress-bar {
            height: 100%;
            background-color: #00aaff;
            width: 0%;
            transition: width 0.3s;
        }
    </style>
</head>
<body>
    <!-- 顶部状态栏 -->
    <div class="status-bar">
        <div class="status-left">
            <span id="current-time">11:50</span>
            <span style="margin-left: 10px;">中国移动</span>
            <span style="margin-left: 5px;" id="network-type">4G</span>
        </div>
        <div class="status-right">
            <span>5G</span>
            <span style="margin-left: 15px;" id="battery">32%</span>
        </div>
    </div>
    
    <!-- 标题栏 -->
    <div class="header">
        <div class="menu-icon" id="toggle-panel">
            <span></span>
            <span></span>
            <span></span>
        </div>
        <div class="logo">
            <div class="logo-icon"></div>
            <span>PocketMQO</span>
        </div>
        <div class="header-controls">
            <div class="fps-counter">FPS: <span id="fps-value">120</span></div>
            <div class="header-icon" title="分享">
                <svg viewBox="0 0 24 24" fill="white" width="20px" height="20px">
                    <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>
                </svg>
            </div>
            <div class="header-icon" title="截图" id="screenshot-btn">
                <svg viewBox="0 0 24 24" fill="white" width="20px" height="20px">
                    <path d="M12 15.2C13.767 15.2 15.2 13.767 15.2 12C15.2 10.233 13.767 8.8 12 8.8C10.233 8.8 8.8 10.233 8.8 12C8.8 13.767 10.233 15.2 12 15.2ZM9 2L7.17 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4H16.83L15 2H9ZM12 17C9.24 17 7 14.76 7 12C7 9.24 9.24 7 12 7C14.76 7 17 9.24 17 12C17 14.76 14.76 17 12 17Z"/>
                </svg>
            </div>
            <div class="header-icon" title="全屏" id="fullscreen-btn">
                <svg viewBox="0 0 24 24" fill="white" width="20px" height="20px">
                    <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>
                </svg>
            </div>
        </div>
    </div>
    
    <!-- 主内容区 -->
    <div class="main-container">
        <!-- 上传面板 -->
        <div class="upload-panel" id="upload-panel">
            <div class="panel-title">
                <svg viewBox="0 0 24 24" fill="#e0e0e0" width="20px" height="20px">
                    <path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"/>
                </svg>
                <span>上传MMD模型</span>
            </div>
            
            <div class="upload-area" id="drop-zone">
                <div class="upload-icon">
                    <svg viewBox="0 0 24 24" fill="#444" width="48px" height="48px">
                        <path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"/>
                    </svg>
                </div>
                <p>拖放MMD文件到这里或点击选择</p>
                <input type="file" id="file-input" accept=".pmx,.pmd" style="display: none;">
            </div>
            
            <div class="progress-container" id="progress-container">
                <div class="progress-bar" id="progress-bar"></div>
            </div>
            
            <div class="model-controls">
                <div class="control-group">
                    <h3>模型缩放</h3>
                    <div class="slider-container">
                        <input type="range" min="0.1" max="2" step="0.1" value="1" id="scale-slider">
                        <div class="slider-value" id="scale-value">1.0</div>
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>X轴旋转</h3>
                    <div class="slider-container">
                        <input type="range" min="0" max="360" step="1" value="0" id="rotation-x-slider">
                        <div class="slider-value" id="rotation-x-value">0°</div>
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>Y轴旋转</h3>
                    <div class="slider-container">
                        <input type="range" min="0" max="360" step="1" value="0" id="rotation-y-slider">
                        <div class="slider-value" id="rotation-y-value">0°</div>
                    </div>
                </div>
                
                <div class="control-group">
                    <h3>Z轴旋转</h3>
                    <div class="slider-container">
                        <input type="range" min="0" max="360" step="1" value="0" id="rotation-z-slider">
                        <div class="slider-value" id="rotation-z-value">0°</div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- 3D视图 -->
        <div id="viewer-container"></div>
    </div>
    
    <!-- 底部工具栏 -->
    <div class="toolbar">
        <div class="axis-label">
            <div class="axis-x"></div>
            <span>X</span>
        </div>
        <div class="axis-label">
            <div class="axis-y"></div>
            <span>Y</span>
        </div>
        <div class="axis-label">
            <div class="axis-z"></div>
            <span>Z</span>
        </div>
    </div>
    
    <!-- 添加加载提示 -->
    <div class="loading-indicator" id="loading-indicator">加载模型中...</div>
    
    <!-- 添加错误提示 -->
    <div class="error-message" id="error-message"></div>

    <script>
        // 初始化Three.js场景
        let scene, camera, renderer, controls;
        let model = null;
        let fps = 0, lastTime = performance.now();
        let loadTimeout = null;
        const MAX_LOAD_TIME = 30000; // 30秒超时
        
        function initViewer() {
            // 创建场景
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x2a2a2a);
            
            // 创建相机
            camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(0, 10, 20);
            
            // 创建渲染器
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight - 75);
            document.getElementById('viewer-container').appendChild(renderer.domElement);
            
            // 添加轨道控制
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            
            // 添加光源
            const ambientLight = new THREE.AmbientLight(0x606060);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(1, 1, 1);
            scene.add(directionalLight);
            
            // 添加坐标轴
            const axesHelper = new THREE.AxesHelper(5);
            scene.add(axesHelper);
            
            // 添加网格地面
            const gridHelper = new THREE.GridHelper(20, 20, 0x444444, 0x444444);
            scene.add(gridHelper);
            
            // 开始动画循环
            animate();
            
            // 窗口大小调整事件
            window.addEventListener('resize', onWindowResize);
        }
        
        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight - 75);
        }
        
        function animate() {
            requestAnimationFrame(animate);
            
            // 更新控制
            controls.update();
            
            // 计算FPS
            const now = performance.now();
            const delta = now - lastTime;
            if (delta >= 1000) {
                fps = Math.round(1000 / (delta / frames));
                document.getElementById('fps-value').textContent = fps;
                lastTime = now;
                frames = 0;
            }
            frames++;
            
            // 渲染场景
            renderer.render(scene, camera);
        }
        
        let frames = 0;
        
        // 加载MMD模型
        function loadModel(file) {
            // 显示加载提示
            const loadingIndicator = document.getElementById('loading-indicator');
            const errorMessage = document.getElementById('error-message');
            const progressContainer = document.getElementById('progress-container');
            const progressBar = document.getElementById('progress-bar');
            
            loadingIndicator.style.display = 'block';
            errorMessage.style.display = 'none';
            progressContainer.style.display = 'block';
            progressBar.style.width = '0%';
            
            // 创建临时URL
            const objectUrl = URL.createObjectURL(file);
            
            // 设置加载超时
            if (loadTimeout) clearTimeout(loadTimeout);
            loadTimeout = setTimeout(() => {
                if (!model) {
                    console.error('模型加载超时');
                    errorMessage.textContent = '模型加载超时，请尝试较小的文件或检查文件格式';
                    errorMessage.style.display = 'block';
                    loadingIndicator.style.display = 'none';
                    progressContainer.style.display = 'none';
                    
                    // 释放临时URL
                    URL.revokeObjectURL(objectUrl);
                }
            }, MAX_LOAD_TIME);
            
            // 模拟进度更新
            let progress = 0;
            const progressInterval = setInterval(() => {
                if (progress < 90) {
                    progress += 5;
                    progressBar.style.width = progress + '%';
                }
            }, 300);
            
            const loader = new THREE.MMDLoader();
            
            loader.loadPmx(
                objectUrl,
                function (object) {
                    // 清理旧模型
                    if (model) {
                        scene.remove(model);
                        // 释放资源
                        disposeModel(model);
                        model = null;
                    }
                    
                    model = object;
                    scene.add(model);
                    
                    // 居中模型
                    centerModel(model);
                    
                    // 隐藏加载提示
                    loadingIndicator.style.display = 'none';
                    progressContainer.style.display = 'none';
                    
                    // 清除超时和进度更新
                    clearTimeout(loadTimeout);
                    clearInterval(progressInterval);
                    
                    // 释放临时URL
                    URL.revokeObjectURL(objectUrl);
                },
                function (progress) {
                    // 更新进度条
                    progressBar.style.width = Math.round((progress.loaded / progress.total) * 100) + '%';
                },
                function (error) {
                    console.error('模型加载错误:', error);
                    
                    // 显示错误信息
                    errorMessage.textContent = '模型加载失败: ' + (error.message || '未知错误');
                    errorMessage.style.display = 'block';
                    
                    // 隐藏加载提示
                    loadingIndicator.style.display = 'none';
                    progressContainer.style.display = 'none';
                    
                    // 清除超时和进度更新
                    clearTimeout(loadTimeout);
                    clearInterval(progressInterval);
                    
                    // 释放临时URL
                    URL.revokeObjectURL(objectUrl);
                }
            );
        }
        
        // 居中模型
        function centerModel(model) {
            const box = new THREE.Box3().setFromObject(model);
            const center = box.getCenter(new THREE.Vector3());
            const size = box.getSize(new THREE.Vector3());
            
            // 将模型移动到原点
            model.position.x = -center.x;
            model.position.y = -center.y;
            model.position.z = -center.z;
            
            // 调整相机位置
            const maxDim = Math.max(size.x, size.y, size.z);
            const fov = camera.fov * (Math.PI / 180);
            let cameraZ = Math.abs(maxDim / Math.sin(fov / 2));
            cameraZ *= 1.5; // 稍微拉远一点
            
            camera.position.set(0, 0, cameraZ);
            camera.lookAt(0, 0, 0);
            
            controls.update();
        }
        
        // 释放模型资源
        function disposeModel(model) {
            model.traverse((child) => {
                if (child.isMesh) {
                    if (child.geometry) {
                        child.geometry.dispose();
                    }
                    if (child.material) {
                        if (Array.isArray(child.material)) {
                            child.material.forEach(material => material.dispose());
                        } else {
                            child.material.dispose();
                        }
                    }
                }
            });
        }
        
        // 初始化UI事件
        function initUI() {
            // 文件上传处理
            const dropZone = document.getElementById('drop-zone');
            const fileInput = document.getElementById('file-input');
            
            dropZone.addEventListener('click', () => {
                fileInput.click();
            });
            
            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    const file = e.target.files[0];
                    if (file.name.endsWith('.pmx') || file.name.endsWith('.pmd')) {
                        loadModel(file);
                    } else {
                        const errorMessage = document.getElementById('error-message');
                        errorMessage.textContent = '请上传PMX或PMD格式的MMD模型文件';
                        errorMessage.style.display = 'block';
                    }
                }
            });
            
            // 拖放上传
            dropZone.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropZone.style.borderColor = '#00aaff';
            });
            
            dropZone.addEventListener('dragleave', () => {
                dropZone.style.borderColor = '#444';
            });
            
            dropZone.addEventListener('drop', (e) => {
                e.preventDefault();
                dropZone.style.borderColor = '#444';
                
                if (e.dataTransfer.files.length > 0) {
                    const file = e.dataTransfer.files[0];
                    if (file.name.endsWith('.pmx') || file.name.endsWith('.pmd')) {
                        loadModel(file);
                    } else {
                        const errorMessage = document.getElementById('error-message');
                        errorMessage.textContent = '请上传PMX或PMD格式的MMD模型文件';
                        errorMessage.style.display = 'block';
                    }
                }
            });
            
            // 控制面板切换（移动端）
            document.getElementById('toggle-panel').addEventListener('click', () => {
                document.getElementById('upload-panel').classList.toggle('active');
            });
            
            // 全屏功能
            document.getElementById('fullscreen-btn').addEventListener('click', () => {
                if (!document.fullscreenElement) {
                    renderer.domElement.requestFullscreen().catch(err => {
                        alert(`全屏错误: ${err.message}`);
                    });
                } else {
                    document.exitFullscreen();
                }
            });
            
            // 截图功能
            document.getElementById('screenshot-btn').addEventListener('click', () => {
                renderer.render(scene, camera);
                const dataURL = renderer.domElement.toDataURL('image/png');
                const link = document.createElement('a');
                link.download = 'mmd-screenshot.png';
                link.href = dataURL;
                link.click();
            });
            
            // 模型控制滑块
            const scaleSlider = document.getElementById('scale-slider');
            const scaleValue = document.getElementById('scale-value');
            
            scaleSlider.addEventListener('input', () => {
                const value = parseFloat(scaleSlider.value);
                scaleValue.textContent = value.toFixed(1);
                
                if (model) {
                    model.scale.set(value, value, value);
                }
            });
            
            // 旋转滑块
            const rotationSliders = [
                { slider: 'rotation-x-slider', value: 'rotation-x-value', axis: 'x' },
                { slider: 'rotation-y-slider', value: 'rotation-y-value', axis: 'y' },
                { slider: 'rotation-z-slider', value: 'rotation-z-value', axis: 'z' }
            ];
            
            rotationSliders.forEach(item => {
                const slider = document.getElementById(item.slider);
                const valueDisplay = document.getElementById(item.value);
                
                slider.addEventListener('input', () => {
                    valueDisplay.textContent = slider.value + '°';
                    
                    if (model) {
                        const radians = parseInt(slider.value) * (Math.PI / 180);
                        
                        if (item.axis === 'x') model.rotation.x = radians;
                        if (item.axis === 'y') model.rotation.y = radians;
                        if (item.axis === 'z') model.rotation.z = radians;
                    }
                });
            });
            
            // 更新时间
            function updateTime() {
                const now = new Date();
                const hours = now.getHours().toString().padStart(2, '0');
                const minutes = now.getMinutes().toString().padStart(2, '0');
                document.getElementById('current-time').textContent = `${hours}:${minutes}`;
            }
            
            updateTime();
            setInterval(updateTime, 60000);
        }
        
        // 页面加载完成后初始化
        window.addEventListener('load', () => {
            initViewer();
            initUI();
        });
    </script>
</body>
</html>
